// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox_MVC.Data;

#nullable disable

namespace ToolBox_MVC.Migrations.ToolBoxDb
{
    [DbContext(typeof(ToolBoxDbContext))]
    [Migration("20250519083330_addedAutoOP1")]
    partial class addedAutoOP1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MFilesAccountMFilesGroup", b =>
                {
                    b.Property<int>("AccountsId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("AccountsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("MFilesAccountMFilesGroup");
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("License")
                        .HasColumnType("int");

                    b.Property<bool>("Maintained")
                        .HasColumnType("bit");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("ServerRole")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccountName", "ServerId")
                        .IsUnique();

                    b.ToTable("MFilesAccounts");
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MFilesId")
                        .HasColumnType("int");

                    b.Property<bool>("Maintained")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("MFilesId", "ServerId")
                        .IsUnique()
                        .HasFilter("[ServerId] IS NOT NULL");

                    b.ToTable("MFilesGroups");
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NetworkAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolSequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("SyncTime")
                        .HasColumnType("time");

                    b.Property<string>("VaultGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MFilesServers");
                });

            modelBuilder.Entity("MFilesAccountMFilesGroup", b =>
                {
                    b.HasOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesAccount", b =>
                {
                    b.HasOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesServer", null)
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesGroup", b =>
                {
                    b.HasOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesServer", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesServer", b =>
                {
                    b.OwnsOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.AutomaticOperations", "AutomaticOP", b1 =>
                        {
                            b1.Property<int>("MFilesServerId")
                                .HasColumnType("int");

                            b1.Property<bool>("AutoActivationHandling")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoRemove")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoRestore")
                                .HasColumnType("bit");

                            b1.HasKey("MFilesServerId");

                            b1.ToTable("MFilesServers");

                            b1.WithOwner()
                                .HasForeignKey("MFilesServerId");
                        });

                    b.OwnsOne("ToolBox_MVC.Areas.LicenseManager.Models.DBModels.MFilesCredential", "MfCredential", b1 =>
                        {
                            b1.Property<int>("MFilesServerId")
                                .HasColumnType("int");

                            b1.Property<string>("EncryptedPassword")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EncryptedUserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MFilesServerId");

                            b1.ToTable("MFilesServers");

                            b1.WithOwner()
                                .HasForeignKey("MFilesServerId");
                        });

                    b.OwnsOne("ToolBox_MVC.Models.ADCredential", "ADCredential", b1 =>
                        {
                            b1.Property<int>("MFilesServerId")
                                .HasColumnType("int");

                            b1.Property<string>("Container")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Domain")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EncryptedPassword")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EncryptedUsername")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MFilesServerId");

                            b1.ToTable("MFilesServers");

                            b1.WithOwner()
                                .HasForeignKey("MFilesServerId");
                        });

                    b.Navigation("ADCredential")
                        .IsRequired();

                    b.Navigation("AutomaticOP")
                        .IsRequired();

                    b.Navigation("MfCredential")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
